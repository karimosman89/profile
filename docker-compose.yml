# Professional Docker Compose for Karim Osman's Portfolio
# Multi-service architecture with monitoring and caching

version: '3.8'

services:
  # Main Portfolio Application
  portfolio:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: karim_portfolio
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_ENV=production
      - REDIS_HOST=redis
      - DATABASE_HOST=postgres
      - SENTRY_DSN=${SENTRY_DSN}
      - GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}
    volumes:
      - portfolio_data:/app/data
      - portfolio_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portfolio.rule=Host(`kosman.streamlit.app`)"
      - "traefik.http.services.portfolio.loadbalancer.server.port=8501"

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: portfolio_redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=portfolio
      - POSTGRES_USER=portfolio_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: portfolio_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - portfolio
    networks:
      - portfolio_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - portfolio_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: portfolio_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - portfolio_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: portfolio_loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
    networks:
      - portfolio_network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

networks:
  portfolio_network:
    driver: bridge
    name: portfolio_network

volumes:
  portfolio_data:
    name: portfolio_data
  portfolio_logs:
    name: portfolio_logs
  redis_data:
    name: redis_data
  postgres_data:
    name: postgres_data
  nginx_logs:
    name: nginx_logs
  prometheus_data:
    name: prometheus_data
  grafana_data:
    name: grafana_data
  loki_data:
    name: loki_data
